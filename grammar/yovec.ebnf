%import common.WS
%ignore WS

// Entities

NUMBER: /-?\d+(\.\d{1,4})?/
number: NUMBER

VAR_IDENT: /[A-Z_]+/
variable: VAR_IDENT

YOLOL_IDENT: /[a-z][a-z0-9]*|:[a-z0-9]+/
external: YOLOL_IDENT

comment: /\/\/[^\n]*/

vector: "[" (nexpr ",")* nexpr ("," nexpr)* "]"
matrix: "[" (vexpr ",")* vexpr ("," vexpr)* "]"

// Statements

program: line*

line: import | export | let | comment

import: "import" external ("as external")?
export: "export" variable "as" external

?let: "let" "number" variable "=" nexpr     -> num_let
    | "let" "vector" variable "=" vexpr     -> vec_let
    | "let" "matrix" variable "=" mexpr     -> mat_let

// Numbers

?num_unary_op: "neg"        -> neg
             | "abs"        -> abs
             | "sqrt"       -> sqrt
             | "sin"        -> sin
             | "cos"        -> cos
             | "tan"        -> tan
             | "arcsin"     -> arcsin
             | "arccos"     -> arccos
             | "arctan"     -> arctan

?num_binary_op: "+"     -> add
              | "-"     -> sub
              | "*"     -> mul
              | "/"     -> div
              | "%"     -> mod
              | "^"     -> exp
              | "<"     -> lt
              | "<="    -> le
              | ">"     -> gt
              | ">="    -> ge
              | "=="    -> eq
              | "!="    -> ne

?nexpr: (num_unary_op)+ nexpr           -> num_unary
      | nexpr (num_binary_op nexpr)+    -> num_binary
      | "reduce" num_binary_op vexpr    -> reduce
      | vexpr "dot" vexpr               -> dot
      | "len" vexpr                     -> len
      | "rows" mexpr                    -> rows
      | "cols" mexpr                    -> cols
      | "(" nexpr ")"
      | "$" external
      | variable
      | number

// Vectors

?vec_binary_op: "+"     -> vec_add
              | "-"     -> vec_sub

?vexpr: "map" num_unary_op vexpr            -> vec_map
      | "map" num_binary_op nexpr vexpr     -> vec_premap
      | "map" nexpr num_binary_op vexpr     -> vec_postmap
      | "concat" vexpr+                     -> concat
      | vexpr (vec_binary_op vexpr)+        -> vec_binary
      | "(" vexpr ")"
      | variable
      | vector

// Matrices

?mat_binary_op: "+"     -> mat_add
              | "-"     -> mat_sub

?mexpr: "map" num_unary_op mexpr            -> mat_map
      | "map" num_binary_op nexpr mexpr     -> mat_premap
      | "map" nexpr num_binary_op mexpr     -> mat_postmap
      | "transpose" mexpr                   -> transpose
      | "rotate" mexpr                      -> rotate
      | mexpr (mat_binary_op mexpr)+        -> mat_binary
      | vexpr "*" mexpr                     -> vm_mul
      | mexpr "*" vexpr                     -> mv_mul
      | mexpr "*" mexpr                     -> mm_mul
      | "(" vexpr ")"
      | "(" mexpr ")"
      | variable
      | matrix
