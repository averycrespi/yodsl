%import common.WS
%ignore WS

NUMBER: /-?\d+(\.\d{1,4})?/
number: NUMBER

VAR_IDENT: /[A-Z]+/
variable: VAR_IDENT

YOLOL_IDENT: /[a-z][a-z0-9]*|:[a-z0-9]+/
external: YOLOL_IDENT

vector: "[" (nexpr ",")* nexpr ("," nexpr)* "]"

// Statements

program: line*
line: import | export | let
import: "import" external
export: "export" variable "as" external
let: "let" variable "=" vexpr

// Numbers

?num_unary_op: "abs"        -> abs
             | "sqrt"       -> sqrt
             | "sin"        -> sin
             | "cos"        -> cos
             | "tan"        -> tan
             | "arcsin"     -> arcsin
             | "arccos"     -> arccos
             | "arctan"     -> arctan

?num_binary_op: "+"     -> add
              | "-"     -> sub
              | "*"     -> mul
              | "/"     -> div
              | "%"     -> mod
              | "^"     -> exp

?nexpr: num_unary_op nexpr              -> unary
      | nexpr num_binary_op nexpr       -> binary
      | "reduce" num_binary_op vexpr    -> reduce
      | vexpr "dot" vexpr               -> dot
      | vexpr "cross" vexpr             -> cross
      | "len" vexpr                     -> len
      | "(" nexpr ")"
      | "$" external
      | number

// Vectors

?vec_unary_op: "-"  -> vneg

?vec_binary_op: "+"     -> vadd
              | "-"     -> vsub

?logical_op: "<"    -> lt
           | "<="   -> le
           | ">"    -> gt
           | ">="   -> ge
           | "=="   -> eq
           | "!="   -> ne

?vexpr: "map" num_binary_op nexpr vexpr     -> premap
      | "map" nexpr num_binary_op vexpr     -> postmap
      | "concat" vexpr vexpr                -> concat
      | vec_unary_op vexpr                  -> vecunary
      | vexpr vec_binary_op vexpr           -> vecbinary
      | "(" vexpr ")"
      | variable
      | vector
