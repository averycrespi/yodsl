%import common.WS
%ignore WS

LITERAL: /-?\d+(\.\d{1,4})?/
literal: LITERAL

VAR_IDENT: /[A-Z_]+/
variable: VAR_IDENT

YOLOL_IDENT: /[a-zA-Z][a-zA-Z0-9_]*|:[a-zA-Z0-9_]+/
external: "$" YOLOL_IDENT

comment: /\/\/[^\n]*/

program: line*

line: import | export | let | comment

import: "import" external ("as" external)?
export: "export" variable "as" external
let: "let" variable "=" vexpr

?unary_op: "neg"        -> neg
         | "abs"        -> abs
         | "sqrt"       -> sqrt
         | "sin"        -> sin
         | "cos"        -> cos
         | "tan"        -> tan
         | "arcsin"     -> arcsin
         | "arccos"     -> arccos
         | "arctan"     -> arctan
         | "csc"        -> csc
         | "sec"        -> sec
         | "cot"        -> cot
         | "arccsc"     -> arccsc
         | "arcsec"     -> arcsec
         | "arccot"     -> arccot
         | "ln"         -> ln

?binary_op: "+"     -> add
          | "-"     -> sub
          | "*"     -> mul
          | "/"     -> div
          | "%"     -> mod
          | "^"     -> exp
          | "<"     -> lt
          | "<="    -> le
          | ">"     -> gt
          | ">="    -> ge
          | "=="    -> eq
          | "!="    -> ne

?number: literal | variable | external

vector: "[" (vector ",")* vector ("," vector)* "]"
      | number

?vexpr: "map" unary_op vexpr            -> unary_map
      | "map" binary_op vexpr vexpr+    -> binary_map
      | "concat" vexpr+                 -> concat
      | "dim" vexpr                     -> dim
      | "dot" vexpr vexpr               -> dot
      | "elem" vexpr literal            -> elem
      | "len" vexpr                     -> len
      | "matmul" vexpr vexpr            -> matmul
      | "reduce" binary_op vexpr        -> reduce
      | "repeat" vexpr literal          -> repeat
      | "reverse" vexpr                 -> reverse
      | "transpose" vexpr               -> transpose
      | "(" vexpr ")"
      | variable
      | vector
