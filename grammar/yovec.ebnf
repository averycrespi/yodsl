%import common.WS
%ignore WS

// =========
// Terminals
// =========

COMMENT: /\/\/[^\n]*/
LITERAL: /-?\d+(\.\d{1,4})?/
VAR_IDENT: /[A-Z_]+/
YOLOL_IDENT: /[a-zA-Z][a-zA-Z0-9]*|:[a-zA-Z0-9]+/

// ==========
// Statements
// ==========

program: line*

line: import | export | let | comment

import: "import" external ("as" external)?
export: "export" variable "as" external

?let: "let" "number" variable "=" nexpr     -> num_let
    | "let" "vector" variable "=" vexpr     -> vec_let
    | "let" "matrix" variable "=" mexpr     -> mat_let

comment: COMMENT

// =========
// Variables
// =========

variable: VAR_IDENT

external: YOLOL_IDENT

// =======
// Numbers
// =======

number: LITERAL

?num_unary_op: "neg"        -> neg
             | "not"        -> not
             | "abs"        -> abs
             | "sqrt"       -> sqrt
             | "sin"        -> sin
             | "cos"        -> cos
             | "tan"        -> tan
             | "arcsin"     -> arcsin
             | "arccos"     -> arccos
             | "arctan"     -> arctan
             | "ln"         -> ln
             | "csc"        -> csc
             | "sec"        -> sec
             | "cot"        -> cot
             | "arccsc"     -> arccsc
             | "arcsec"     -> arcsec
             | "arccot"     -> arccot

?num_binary_op: "+"     -> add
              | "-"     -> sub
              | "*"     -> mul
              | "/"     -> div
              | "%"     -> mod
              | "^"     -> exp
              | "<"     -> lt
              | "<="    -> le
              | ">"     -> gt
              | ">="    -> ge
              | "=="    -> eq
              | "!="    -> ne
              | "and"   -> and
              | "nand"  -> nand
              | "or"    -> or
              | "nor"   -> nor
              | "xor"   -> xor

?nexpr: nbin

?nbin: nbase
     | nbin (num_binary_op nbase)+      -> num_binary

?nbase: (num_unary_op)+ nexpr           -> num_unary
      | "reduce" num_binary_op vexpr    -> reduce
      | vexpr "dot" vexpr               -> dot
      | "len" vexpr                     -> len
      | "rows" mexpr                    -> rows
      | "cols" mexpr                    -> cols
      | "elem" vexpr number             -> vec_elem
      | "elem" mexpr number number      -> mat_elem
      | "(" nexpr ")"
      | "$" external
      | variable
      | number

// =======
// Vectors
// =======

vector: "[" (nexpr ",")* nexpr ("," nexpr)* "]"

?vec_binary_op: "+"     -> vec_add
              | "-"     -> vec_sub

?vexpr: vbin

?vbin: vbase
      | vbin (vec_binary_op vbase)+         -> vec_binary

?vbase: "map" num_unary_op vexpr            -> vec_map
      | "map" num_binary_op nexpr vexpr     -> vec_premap
      | "map" nexpr num_binary_op vexpr     -> vec_postmap
      | "apply" num_binary_op vexpr+        -> vec_apply
      | "concat" vexpr+                     -> concat
      | "reverse" vexpr                     -> reverse
      | "row" mexpr number                  -> mat_row
      | "col" mexpr number                  -> mat_col
      | "(" vexpr ")"
      | variable
      | vector

// ========
// Matrices
// ========

matrix: "[" (vexpr ",")* vexpr ("," vexpr)* "]"

?mat_binary_op: "+"     -> mat_add
              | "-"     -> mat_sub

?mexpr: mbin

?mbin: mbase
     | mbin (mat_binary_op mbase)+          -> mat_binary

?mbase: "map" num_unary_op mexpr            -> mat_map
      | "map" num_binary_op nexpr mexpr     -> mat_premap
      | "map" nexpr num_binary_op mexpr     -> mat_postmap
      | "apply" num_binary_op mexpr+        -> mat_apply
      | "transpose" mexpr                   -> transpose
      | mexpr ("*" mexpr)+                  -> mat_mul
      | "(" mexpr ")"
      | variable
      | matrix
