%import common.WS
%ignore WS

IDENT: /[A-Z]+/
variable: IDENT

NUMBER: /-?\d+(\./d{1,4})?/
?number: NUMBER                         -> number
       | "reduce" num_binary_op expr    -> reduce
       | expr "dot" expr                -> dot
       | expr "cross" expr              -> cross

line: let?

?let: "let" variable "=" vector     -> letvec
    | "let" variable "=" range      -> letran
    | "let" variable "=" repeat     -> letrep
    | "let" variable "=" expr       -> letexpr

vector: "[" (number ",")* number ("," number)* "]"
range: "range" "(" (number ",")? number (number ",")? ")"
repeat: "repeat" "(" vector count ")"

?vec_unary_op: "-"  -> neg

?num_binary_op: "+"     -> add
              | "-"     -> sub
              | "*"     -> mul
              | "/"     -> div
              | "%"     -> mod
              | "^"     -> exp

?vec_binary_op: "+"     -> vadd
              | "-"     -> vsub

?logical_op: "<"    -> lt
           | "<="   -> le
           | ">"    -> gt
           | ">="   -> ge
           | "=="   -> eq
           | "!="   -> ne

?expr: "map" num_binary_op number expr  -> premap
     | "map" number num_binary_op expr  -> postmap
     | "filter" logical_op number expr  -> filter
     | "concat" expr expr               -> concat
     | vec_unary_op expr                -> unary
     | expr vec_binary_op expr          -> binary
     | "(" expr ")"
     | variable
