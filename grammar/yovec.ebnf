%import common.WS
%ignore WS

IDENT: /\$[a-zA-Z]+/
variable: IDENT

NUMBER: /-?\d+(\./d{1,4})?/
?literal: NUMBER                        -> num
        | "reduce" lit_binary_op expr   -> red

line: let?

?let: "let" variable "=" vector     -> letvec
    | "let" variable "=" range      -> letran
    | "let" variable "=" repeat     -> letrep
    | "let" variable "=" expr       -> letexpr

vector: "[" (literal ",")* literal ("," literal)* "]"
range: "range" "(" (literal ",")? literal (literal ",")? ")"
repeat: "repeat" "(" vector count ")"

?vec_unary_op: "-"  -> neg

?lit_binary_op: "+"     -> add
              | "-"     -> sub
              | "*"     -> mul
              | "/"     -> div
              | "%"     -> mod
              | "^"     -> exp

?vec_binary_op: "+"     -> vadd
              | "-"     -> vsub
              | "*"     -> vdot
              | "X"     -> vcross

?logical_op: "<"    -> lt
           | "<="   -> le
           | ">"    -> gt
           | ">="   -> ge
           | "=="   -> eq
           | "!="   -> ne

?expr: "map" lit_binary_op literal expr     -> map
     | "filter" logical_op literal expr     -> filter
     | "concat" expr expr                   -> concat
     | vec_unary_op expr                    -> unary
     | expr vec_binary_op expr              -> binary
     | expr logical_op expr                 -> logical
     | "(" expr ")"
     | variable
